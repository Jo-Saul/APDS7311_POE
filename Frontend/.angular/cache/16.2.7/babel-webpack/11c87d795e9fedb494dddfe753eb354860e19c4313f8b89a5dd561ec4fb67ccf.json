{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostServiceService {\n  //constructor\n  constructor(http) {\n    this.http = http;\n    //array of of posts\n    this.postdisplay = [];\n    //subsription for post updates\n    this.updatedpostdisplay = new Subject();\n  }\n  //method to creat new post\n  addpost_service(pTitle, pDesc, pDepart, pProg, pUser) {\n    this.http.post('https://localhost:3000/api/post',\n    //create request\n    {\n      title: pTitle,\n      description: pDesc,\n      departments: pDepart,\n      progress: pProg,\n      username: pUser\n    }).subscribe(thepost => {\n      //update posts\n      this.postdisplay.push(thepost.post);\n      this.updatedpostdisplay.next([...this.postdisplay]);\n    });\n  }\n  //method to get posts\n  getpost_service() {\n    this.http.get('https://localhost:3000/api/post').subscribe(thepost => {\n      if (Array.isArray(thepost)) {\n        //updates posts\n        this.postdisplay = thepost;\n        this.updatedpostdisplay.next([...this.postdisplay]);\n      } else {\n        console.error('thepost is not an array:', thepost);\n      }\n    });\n  }\n  //method to delete post by ID\n  deletepost_service(postId) {\n    if (window.confirm('Are you sure you want to delete this post?')) {\n      this.http.delete('https://localhost:3000/api/post/' + postId).subscribe(() => {\n        //update posts\n        const updatedpostdeleted = this.postdisplay.filter(post => post._id !== postId);\n        this.postdisplay = updatedpostdeleted;\n        this.updatedpostdisplay.next([...this.postdisplay]);\n      });\n    }\n  }\n  //observable used to subsribe components to post service\n  getUpdateListener() {\n    return this.updatedpostdisplay.asObservable();\n  }\n  static #_ = this.ɵfac = function PostServiceService_Factory(t) {\n    return new (t || PostServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostServiceService,\n    factory: PostServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","PostServiceService","constructor","http","postdisplay","updatedpostdisplay","addpost_service","pTitle","pDesc","pDepart","pProg","pUser","post","title","description","departments","progress","username","subscribe","thepost","push","next","getpost_service","get","Array","isArray","console","error","deletepost_service","postId","window","confirm","delete","updatedpostdeleted","filter","_id","getUpdateListener","asObservable","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\2023\\Semester 2\\APDS7311\\POE\\Jo Saul APDS7311 POE\\FRONTEND\\frontend\\src\\app\\home\\post-service.service.ts"],"sourcesContent":["//post service - handles posts (includes creation, deletion and display)\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostServiceService {\n\n  //array of of posts\n  private postdisplay:{\n    _id:string,\n    title:string,\n    description:string,\n    departments:string,\n    progress:string,\n    username:string,\n    __v:string\n  }[] =[];\n\n  //subsription for post updates\n  private updatedpostdisplay = new Subject<{\n    _id:string,\n    title:string,\n    description:string,\n    departments:string,\n    progress:string,\n    username:string,\n    __v:string\n  }[]>();\n\n  //constructor\n  constructor(private http: HttpClient) { }\n\n  //method to creat new post\n  addpost_service(pTitle:string, pDesc:string, pDepart:string, pProg: string, pUser: string | null)\n  {\n    this.http.post<{message:string,post:any}>(\n      'https://localhost:3000/api/post', //create request\n      {\n        title:pTitle,\n        description:pDesc,\n        departments:pDepart,\n        progress:pProg,\n        username: pUser\n      })\n      .subscribe((thepost)=>\n      {\n        //update posts\n        this.postdisplay.push(thepost.post);\n        this.updatedpostdisplay.next([...this.postdisplay]);\n      })\n  }\n\n  //method to get posts\n  getpost_service(){\n    this.http.get<{message:string, post:any}>(\n      'https://localhost:3000/api/post')\n      .subscribe((thepost)=>\n      {\n        if (Array.isArray(thepost)) {\n          //updates posts\n          this.postdisplay = thepost;\n          this.updatedpostdisplay.next([...this.postdisplay]);\n        } else {\n          console.error('thepost is not an array:', thepost);\n        }\n      })\n  }\n\n  //method to delete post by ID\n  deletepost_service(postId:string)\n  {\n    if(window.confirm('Are you sure you want to delete this post?')) {\n      this.http.delete('https://localhost:3000/api/post/' + postId)\n      .subscribe(()=>\n      {\n        //update posts\n        const updatedpostdeleted = this.postdisplay.filter(post=>post._id!==postId);\n        this.postdisplay = updatedpostdeleted;\n        this.updatedpostdisplay.next([...this.postdisplay]);\n      })\n    }\n  }\n\n  //observable used to subsribe components to post service\n  getUpdateListener()\n  {\n    return this.updatedpostdisplay.asObservable();\n  }\n}\n"],"mappings":"AAIA,SAASA,OAAO,QAAQ,MAAM;;;AAK9B,OAAM,MAAOC,kBAAkB;EAwB7B;EACAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAvBxB;IACQ,KAAAC,WAAW,GAQd,EAAE;IAEP;IACQ,KAAAC,kBAAkB,GAAG,IAAIL,OAAO,EAQlC;EAGkC;EAExC;EACAM,eAAeA,CAACC,MAAa,EAAEC,KAAY,EAAEC,OAAc,EAAEC,KAAa,EAAEC,KAAoB;IAE9F,IAAI,CAACR,IAAI,CAACS,IAAI,CACZ,iCAAiC;IAAE;IACnC;MACEC,KAAK,EAACN,MAAM;MACZO,WAAW,EAACN,KAAK;MACjBO,WAAW,EAACN,OAAO;MACnBO,QAAQ,EAACN,KAAK;MACdO,QAAQ,EAAEN;KACX,CAAC,CACDO,SAAS,CAAEC,OAAO,IAAG;MAEpB;MACA,IAAI,CAACf,WAAW,CAACgB,IAAI,CAACD,OAAO,CAACP,IAAI,CAAC;MACnC,IAAI,CAACP,kBAAkB,CAACgB,IAAI,CAAC,CAAC,GAAG,IAAI,CAACjB,WAAW,CAAC,CAAC;IACrD,CAAC,CAAC;EACN;EAEA;EACAkB,eAAeA,CAAA;IACb,IAAI,CAACnB,IAAI,CAACoB,GAAG,CACX,iCAAiC,CAAC,CACjCL,SAAS,CAAEC,OAAO,IAAG;MAEpB,IAAIK,KAAK,CAACC,OAAO,CAACN,OAAO,CAAC,EAAE;QAC1B;QACA,IAAI,CAACf,WAAW,GAAGe,OAAO;QAC1B,IAAI,CAACd,kBAAkB,CAACgB,IAAI,CAAC,CAAC,GAAG,IAAI,CAACjB,WAAW,CAAC,CAAC;OACpD,MAAM;QACLsB,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAER,OAAO,CAAC;;IAEtD,CAAC,CAAC;EACN;EAEA;EACAS,kBAAkBA,CAACC,MAAa;IAE9B,IAAGC,MAAM,CAACC,OAAO,CAAC,4CAA4C,CAAC,EAAE;MAC/D,IAAI,CAAC5B,IAAI,CAAC6B,MAAM,CAAC,kCAAkC,GAAGH,MAAM,CAAC,CAC5DX,SAAS,CAAC,MAAI;QAEb;QACA,MAAMe,kBAAkB,GAAG,IAAI,CAAC7B,WAAW,CAAC8B,MAAM,CAACtB,IAAI,IAAEA,IAAI,CAACuB,GAAG,KAAGN,MAAM,CAAC;QAC3E,IAAI,CAACzB,WAAW,GAAG6B,kBAAkB;QACrC,IAAI,CAAC5B,kBAAkB,CAACgB,IAAI,CAAC,CAAC,GAAG,IAAI,CAACjB,WAAW,CAAC,CAAC;MACrD,CAAC,CAAC;;EAEN;EAEA;EACAgC,iBAAiBA,CAAA;IAEf,OAAO,IAAI,CAAC/B,kBAAkB,CAACgC,YAAY,EAAE;EAC/C;EAAC,QAAAC,CAAA,G;qBAlFUrC,kBAAkB,EAAAsC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlB1C,kBAAkB;IAAA2C,OAAA,EAAlB3C,kBAAkB,CAAA4C,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}