{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostServiceService {\n  constructor(http) {\n    this.http = http;\n    this.postdisplay = [];\n    this.updatedpostdisplay = new Subject();\n  }\n  addpost_service(pTitle, pDesc, pDepart, pProg) {\n    this.http.post('https://localhost:3000/api/posts', {\n      title: pTitle,\n      description: pDesc,\n      departments: pDepart,\n      progress: pProg\n    }).subscribe(thepost => {\n      this.postdisplay.push(thepost.post);\n      this.updatedpostdisplay.next([...this.postdisplay]);\n    });\n  }\n  getpost_service() {\n    this.http.get('https://localhost:3000/api/post').subscribe(thepost => {\n      this.postdisplay = thepost.post;\n      this.updatedpostdisplay.next([...this.postdisplay]);\n    });\n  }\n  deletepost_service(postId) {\n    this.http.delete('https://localhost:3000/api/post/' + postId).subscribe(() => {\n      const updatedpostdeleted = this.postdisplay.filter(post => post._id !== postId);\n      this.postdisplay = updatedpostdeleted;\n      this.updatedpostdisplay.next([...this.postdisplay]);\n    });\n  }\n  getUpdateListener() {\n    return this.updatedpostdisplay.asObservable();\n  }\n  static #_ = this.ɵfac = function PostServiceService_Factory(t) {\n    return new (t || PostServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostServiceService,\n    factory: PostServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","PostServiceService","constructor","http","postdisplay","updatedpostdisplay","addpost_service","pTitle","pDesc","pDepart","pProg","post","title","description","departments","progress","subscribe","thepost","push","next","getpost_service","get","deletepost_service","postId","delete","updatedpostdeleted","filter","_id","getUpdateListener","asObservable","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\2023\\Semester 2\\APDS7311\\POE\\Jo Saul APDS7311 POE\\FRONTEND\\frontend\\src\\app\\home\\post-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostServiceService {\n\n  private postdisplay:{\n    _id:string,\n    title:string,\n    description:string,\n    departments:string,\n    progress:string\n    __v:string\n  }[] =[];\n\n  private updatedpostdisplay = new Subject<{\n    _id:string,\n    title:string,\n    description:string,\n    departments:string,\n    progress:string\n    __v:string\n  }[]>();\n\n  constructor(private http: HttpClient) { }\n\n  addpost_service(pTitle:string, pDesc:string, pDepart:string, pProg: string)\n  {\n    this.http.post<{message:string,post:any}>(\n      'https://localhost:3000/api/posts',\n      {\n        title:pTitle,\n        description:pDesc,\n        departments:pDepart,\n        progress:pProg\n      })\n      .subscribe((thepost)=>\n      {\n        this.postdisplay.push(thepost.post);\n        this.updatedpostdisplay.next([...this.postdisplay]);\n      })\n  }\n\n  getpost_service(){\n    this.http.get<{message:string, post:any}>(\n      'https://localhost:3000/api/post')\n      .subscribe((thepost)=>\n      {\n        this.postdisplay = thepost.post;\n        this.updatedpostdisplay.next([...this.postdisplay]);\n      })\n  }\n\n  deletepost_service(postId:string)\n  {\n    this.http.delete('https://localhost:3000/api/post/' + postId)\n    .subscribe(()=>\n    {\n      const updatedpostdeleted = this.postdisplay.filter(post=>post._id!==postId);\n      this.postdisplay = updatedpostdeleted;\n      this.updatedpostdisplay.next([...this.postdisplay]);\n    })\n  }\n\n  getUpdateListener()\n  {\n    return this.updatedpostdisplay.asObservable();\n  }\n}\n"],"mappings":"AAEA,SAASA,OAAO,QAAQ,MAAM;;;AAK9B,OAAM,MAAOC,kBAAkB;EAoB7BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAlBhB,KAAAC,WAAW,GAOd,EAAE;IAEC,KAAAC,kBAAkB,GAAG,IAAIL,OAAO,EAOlC;EAEkC;EAExCM,eAAeA,CAACC,MAAa,EAAEC,KAAY,EAAEC,OAAc,EAAEC,KAAa;IAExE,IAAI,CAACP,IAAI,CAACQ,IAAI,CACZ,kCAAkC,EAClC;MACEC,KAAK,EAACL,MAAM;MACZM,WAAW,EAACL,KAAK;MACjBM,WAAW,EAACL,OAAO;MACnBM,QAAQ,EAACL;KACV,CAAC,CACDM,SAAS,CAAEC,OAAO,IAAG;MAEpB,IAAI,CAACb,WAAW,CAACc,IAAI,CAACD,OAAO,CAACN,IAAI,CAAC;MACnC,IAAI,CAACN,kBAAkB,CAACc,IAAI,CAAC,CAAC,GAAG,IAAI,CAACf,WAAW,CAAC,CAAC;IACrD,CAAC,CAAC;EACN;EAEAgB,eAAeA,CAAA;IACb,IAAI,CAACjB,IAAI,CAACkB,GAAG,CACX,iCAAiC,CAAC,CACjCL,SAAS,CAAEC,OAAO,IAAG;MAEpB,IAAI,CAACb,WAAW,GAAGa,OAAO,CAACN,IAAI;MAC/B,IAAI,CAACN,kBAAkB,CAACc,IAAI,CAAC,CAAC,GAAG,IAAI,CAACf,WAAW,CAAC,CAAC;IACrD,CAAC,CAAC;EACN;EAEAkB,kBAAkBA,CAACC,MAAa;IAE9B,IAAI,CAACpB,IAAI,CAACqB,MAAM,CAAC,kCAAkC,GAAGD,MAAM,CAAC,CAC5DP,SAAS,CAAC,MAAI;MAEb,MAAMS,kBAAkB,GAAG,IAAI,CAACrB,WAAW,CAACsB,MAAM,CAACf,IAAI,IAAEA,IAAI,CAACgB,GAAG,KAAGJ,MAAM,CAAC;MAC3E,IAAI,CAACnB,WAAW,GAAGqB,kBAAkB;MACrC,IAAI,CAACpB,kBAAkB,CAACc,IAAI,CAAC,CAAC,GAAG,IAAI,CAACf,WAAW,CAAC,CAAC;IACrD,CAAC,CAAC;EACJ;EAEAwB,iBAAiBA,CAAA;IAEf,OAAO,IAAI,CAACvB,kBAAkB,CAACwB,YAAY,EAAE;EAC/C;EAAC,QAAAC,CAAA,G;qBA/DU7B,kBAAkB,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBlC,kBAAkB;IAAAmC,OAAA,EAAlBnC,kBAAkB,CAAAoC,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}