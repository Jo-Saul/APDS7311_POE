{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./token.service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthServiceService {\n  //constructor\n  constructor(http, tokenService, router) {\n    this.http = http;\n    this.tokenService = tokenService;\n    this.router = router;\n    //observable to hold the username of the logged in user\n    this.usernameSubject = new BehaviorSubject(null);\n    this.username$ = this.usernameSubject.asObservable();\n    this.checkUserStatus();\n  }\n  //sign up method\n  signup(uname, upass, ufirst, ulast, ucont) {\n    this.http.post('https://localhost:3000/api/user', {\n      username: uname,\n      password: upass,\n      firstname: ufirst,\n      lastname: ulast,\n      contact: ucont\n    }, {\n      responseType: 'text'\n    }).subscribe(response => {\n      //navigate to login after user sucessfully created\n      this.router.navigate(['/login']);\n    });\n  }\n  //login method\n  login(uname, upass) {\n    this.http.post('https://localhost:3000/api/auth', {\n      username: uname,\n      password: upass\n    }).subscribe(respose => {\n      const token = respose.token;\n      this.tokenService.setToken(token);\n      //save username\n      localStorage.setItem('username', uname); // save the username\n      //update username observable\n      this.usernameSubject.next(uname); // update the username observable\n      //navigate to home after successful login\n      this.router.navigate(['/home']);\n    });\n  }\n  //method to check if user is logged in\n  isLoggedIn() {\n    return this.tokenService.getToken() != null;\n  }\n  //method to logout user\n  logout() {\n    this.tokenService.removeToken();\n    localStorage.removeItem('username');\n    //update tusername observable\n    this.usernameSubject.next(null);\n    //navigate to login after successful logout\n    this.router.navigate(['/login']);\n  }\n  checkUserStatus() {\n    const username = localStorage.getItem('username');\n    if (username) {\n      this.usernameSubject.next(username);\n    }\n  }\n  static #_ = this.ɵfac = function AuthServiceService_Factory(t) {\n    return new (t || AuthServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService), i0.ɵɵinject(i3.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthServiceService,\n    factory: AuthServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","AuthServiceService","constructor","http","tokenService","router","usernameSubject","username$","asObservable","checkUserStatus","signup","uname","upass","ufirst","ulast","ucont","post","username","password","firstname","lastname","contact","responseType","subscribe","response","navigate","login","respose","token","setToken","localStorage","setItem","next","isLoggedIn","getToken","logout","removeToken","removeItem","getItem","_","i0","ɵɵinject","i1","HttpClient","i2","TokenService","i3","Router","_2","factory","ɵfac","providedIn"],"sources":["D:\\2023\\Semester 2\\APDS7311\\POE\\Jo Saul APDS7311 POE\\FRONTEND\\frontend\\src\\app\\auth\\auth-service.service.ts"],"sourcesContent":["//auth service - service for authenticating user. handles signup and login\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TokenService } from './token.service';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthServiceService {\n\n  //observable to hold the username of the logged in user\n  private usernameSubject = new BehaviorSubject<string | null>(null);\n  username$ = this.usernameSubject.asObservable();\n\n  //constructor\n  constructor(private http: HttpClient, private tokenService: TokenService, private router: Router) \n  { \n    this.checkUserStatus();\n  }\n\n  //sign up method\n  signup (uname:string, upass:string, ufirst:string, ulast:string, ucont:string)\n  {\n    this.http.post('https://localhost:3000/api/user', {\n      username:uname,\n      password:upass,\n      firstname:ufirst,\n      lastname:ulast,\n      contact:ucont\n    }, {responseType: 'text'})\n    .subscribe(response =>{\n      //navigate to login after user sucessfully created\n      this.router.navigate(['/login']);\n    });\n  }\n\n  //login method\n  login (uname:string, upass:string)\n  {\n    this.http.post<{token:string}>('https://localhost:3000/api/auth',{\n      username:uname,\n      password:upass\n    })\n    .subscribe(respose =>{\n      const token = respose.token;\n      this.tokenService.setToken(token);\n      //save username\n      localStorage.setItem('username', uname); // save the username\n      //update username observable\n      this.usernameSubject.next(uname); // update the username observable\n      //navigate to home after successful login\n      this.router.navigate(['/home']);\n    })\n  }\n\n  //method to check if user is logged in\n  isLoggedIn() {\n    return this.tokenService.getToken() != null;\n  }\n\n  //method to logout user\n  logout() {\n    this.tokenService.removeToken();\n    localStorage.removeItem('username');\n    //update tusername observable\n    this.usernameSubject.next(null);\n    //navigate to login after successful logout\n    this.router.navigate(['/login']); \n  }\n\n  checkUserStatus() {\n    const username = localStorage.getItem('username');\n    if (username) {\n      this.usernameSubject.next(username);\n    }\n  }\n\n}"],"mappings":"AAMA,SAASA,eAAe,QAAQ,MAAM;;;;;AAKtC,OAAM,MAAOC,kBAAkB;EAM7B;EACAC,YAAoBC,IAAgB,EAAUC,YAA0B,EAAUC,MAAc;IAA5E,KAAAF,IAAI,GAAJA,IAAI;IAAsB,KAAAC,YAAY,GAAZA,YAAY;IAAwB,KAAAC,MAAM,GAANA,MAAM;IALxF;IACQ,KAAAC,eAAe,GAAG,IAAIN,eAAe,CAAgB,IAAI,CAAC;IAClE,KAAAO,SAAS,GAAG,IAAI,CAACD,eAAe,CAACE,YAAY,EAAE;IAK7C,IAAI,CAACC,eAAe,EAAE;EACxB;EAEA;EACAC,MAAMA,CAAEC,KAAY,EAAEC,KAAY,EAAEC,MAAa,EAAEC,KAAY,EAAEC,KAAY;IAE3E,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAC,iCAAiC,EAAE;MAChDC,QAAQ,EAACN,KAAK;MACdO,QAAQ,EAACN,KAAK;MACdO,SAAS,EAACN,MAAM;MAChBO,QAAQ,EAACN,KAAK;MACdO,OAAO,EAACN;KACT,EAAE;MAACO,YAAY,EAAE;IAAM,CAAC,CAAC,CACzBC,SAAS,CAACC,QAAQ,IAAG;MACpB;MACA,IAAI,CAACnB,MAAM,CAACoB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,CAAC;EACJ;EAEA;EACAC,KAAKA,CAAEf,KAAY,EAAEC,KAAY;IAE/B,IAAI,CAACT,IAAI,CAACa,IAAI,CAAiB,iCAAiC,EAAC;MAC/DC,QAAQ,EAACN,KAAK;MACdO,QAAQ,EAACN;KACV,CAAC,CACDW,SAAS,CAACI,OAAO,IAAG;MACnB,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;MAC3B,IAAI,CAACxB,YAAY,CAACyB,QAAQ,CAACD,KAAK,CAAC;MACjC;MACAE,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEpB,KAAK,CAAC,CAAC,CAAC;MACzC;MACA,IAAI,CAACL,eAAe,CAAC0B,IAAI,CAACrB,KAAK,CAAC,CAAC,CAAC;MAClC;MACA,IAAI,CAACN,MAAM,CAACoB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC,CAAC;EACJ;EAEA;EACAQ,UAAUA,CAAA;IACR,OAAO,IAAI,CAAC7B,YAAY,CAAC8B,QAAQ,EAAE,IAAI,IAAI;EAC7C;EAEA;EACAC,MAAMA,CAAA;IACJ,IAAI,CAAC/B,YAAY,CAACgC,WAAW,EAAE;IAC/BN,YAAY,CAACO,UAAU,CAAC,UAAU,CAAC;IACnC;IACA,IAAI,CAAC/B,eAAe,CAAC0B,IAAI,CAAC,IAAI,CAAC;IAC/B;IACA,IAAI,CAAC3B,MAAM,CAACoB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAhB,eAAeA,CAAA;IACb,MAAMQ,QAAQ,GAAGa,YAAY,CAACQ,OAAO,CAAC,UAAU,CAAC;IACjD,IAAIrB,QAAQ,EAAE;MACZ,IAAI,CAACX,eAAe,CAAC0B,IAAI,CAACf,QAAQ,CAAC;;EAEvC;EAAC,QAAAsB,CAAA,G;qBAnEUtC,kBAAkB,EAAAuC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlB/C,kBAAkB;IAAAgD,OAAA,EAAlBhD,kBAAkB,CAAAiD,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}