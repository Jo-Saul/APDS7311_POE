{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { ErrorComponent } from './error/error.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nexport class ErrorInterceptor {\n  constructor(dialog) {\n    this.dialog = dialog;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      let errorMessage = \"An Unknow Error has occured\";\n      if (error.error && error.error.error)\n        // Check if the error message exists in the error object\n        {\n          errorMessage = error.error; // Use the error message from the backend\n        }\n\n      this.dialog.open(ErrorComponent, {\n        data: {\n          message: errorMessage\n        }\n      });\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.MatDialog));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["catchError","throwError","ErrorComponent","ErrorInterceptor","constructor","dialog","intercept","request","next","handle","pipe","error","errorMessage","open","data","message","_","i0","ɵɵinject","i1","MatDialog","_2","factory","ɵfac"],"sources":["D:\\2023\\Semester 2\\APDS7311\\POE\\Jo Saul APDS7311 POE\\FRONTEND\\frontend\\src\\app\\error\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { MatDialog } from '@angular/material/dialog';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { ErrorComponent } from './error/error.component';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n  constructor(private dialog: MatDialog) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler) {\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse)=>{\n        let errorMessage = \"An Unknow Error has occured\";\n        if (error.error && error.error.error) // Check if the error message exists in the error object\n        {\n          errorMessage = error.error; // Use the error message from the backend\n        }\n      this.dialog.open(ErrorComponent,{data:{message:errorMessage}});\n      return throwError(error);\n      })\n      );\n  }\n}\n\n\n\n\n"],"mappings":"AAWA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,QAAQ,MAAM;AACjC,SAASC,cAAc,QAAQ,yBAAyB;;;AAGxD,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,MAAiB;IAAjB,KAAAA,MAAM,GAANA,MAAM;EAAc;EAExCC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BV,UAAU,CAAEW,KAAwB,IAAG;MACrC,IAAIC,YAAY,GAAG,6BAA6B;MAChD,IAAID,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACA,KAAK;QAAE;QACtC;UACEC,YAAY,GAAGD,KAAK,CAACA,KAAK,CAAC,CAAC;;;MAEhC,IAAI,CAACN,MAAM,CAACQ,IAAI,CAACX,cAAc,EAAC;QAACY,IAAI,EAAC;UAACC,OAAO,EAACH;QAAY;MAAC,CAAC,CAAC;MAC9D,OAAOX,UAAU,CAACU,KAAK,CAAC;IACxB,CAAC,CAAC,CACD;EACL;EAAC,QAAAK,CAAA,G;qBAhBUb,gBAAgB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,SAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBlB,gBAAgB;IAAAmB,OAAA,EAAhBnB,gBAAgB,CAAAoB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}